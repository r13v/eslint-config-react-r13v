module.exports = {
  parser: "@typescript-eslint/parser",

  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
  },

  env: {
    es6: true,
    browser: true,
    node: true,
    "jest/globals": true,
  },

  globals: {
    globalThis: true,
  },

  plugins: [
    "@typescript-eslint",
    "promise",
    "unicorn",
    "react",
    "react-hooks",
    "prettier",
    "formatjs",
    "simple-import-sort",
    "jsdoc",
    "jest",
  ],

  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:unicorn/recommended",
    "prettier/@typescript-eslint",
    "plugin:prettier/recommended",
    "prettier/react",
    "plugin:jest/recommended",
    "plugin:jest/style",
  ],

  settings: {
    react: {
      version: "detect",
    },
  },

  rules: {
    // general
    "max-lines": ["warn", 500],
    "no-console": "warn",
    "object-shorthand": "warn",
    "no-unneeded-ternary": "warn",
    "no-nested-ternary": "warn",
    indent: "off",
    "no-prototype-builtins": "warn",
    "no-fallthrough": "warn",
    "newline-before-return": "warn",
    quotes: [
      "warn",
      "double",
      { avoidEscape: true, allowTemplateLiterals: true },
    ],
    semi: ["warn", "never"],
    "padding-line-between-statements": [
      "warn",
      { blankLine: "always", prev: "multiline-block-like", next: "*" },
      { blankLine: "always", prev: ["const", "let", "var"], next: "*" },
      {
        blankLine: "any",
        prev: ["const", "let", "var"],
        next: ["const", "let", "var"],
      },
      {
        blankLine: "always",
        prev: "*",
        next: [
          "return",
          "throw",
          "try",
          "while",
          "do",
          "if",
          "switch",
          "function",
          "for",
          "multiline-const",
        ],
      },
      { blankLine: "always", prev: "multiline-const", next: "*" },
    ],
    curly: ["warn", "all"],
    eqeqeq: ["warn", "always", { null: "ignore" }],
    "max-params": ["warn"],
    "no-shadow": "off",
    "no-restricted-globals": [
      "error",
      "postMessage",
      "blur",
      "focus",
      "close",
      "frames",
      "self",
      "parent",
      "opener",
      "top",
      "length",
      "closed",
      "location",
      "origin",
      "name",
      "locationbar",
      "menubar",
      "personalbar",
      "scrollbars",
      "statusbar",
      "toolbar",
      "status",
      "frameElement",
      "navigator",
      "customElements",
      "external",
      "screen",
      "innerWidth",
      "innerHeight",
      "scrollX",
      "pageXOffset",
      "scrollY",
      "pageYOffset",
      "screenX",
      "screenY",
      "outerWidth",
      "outerHeight",
      "devicePixelRatio",
      "clientInformation",
      "screenLeft",
      "screenTop",
      "defaultStatus",
      "defaultstatus",
      "styleMedia",
      "onanimationend",
      "onanimationiteration",
      "onanimationstart",
      "onsearch",
      "ontransitionend",
      "onwebkitanimationend",
      "onwebkitanimationiteration",
      "onwebkitanimationstart",
      "onwebkittransitionend",
      "isSecureContext",
      "onabort",
      "onblur",
      "oncancel",
      "oncanplay",
      "oncanplaythrough",
      "onchange",
      "onclick",
      "onclose",
      "oncontextmenu",
      "oncuechange",
      "ondblclick",
      "ondrag",
      "ondragend",
      "ondragenter",
      "ondragleave",
      "ondragover",
      "ondragstart",
      "ondrop",
      "ondurationchange",
      "onemptied",
      "onended",
      "onerror",
      "onfocus",
      "oninput",
      "oninvalid",
      "onkeydown",
      "onkeypress",
      "onkeyup",
      "onload",
      "onloadeddata",
      "onloadedmetadata",
      "onloadstart",
      "onmousedown",
      "onmouseenter",
      "onmouseleave",
      "onmousemove",
      "onmouseout",
      "onmouseover",
      "onmouseup",
      "onmousewheel",
      "onpause",
      "onplay",
      "onplaying",
      "onprogress",
      "onratechange",
      "onreset",
      "onresize",
      "onscroll",
      "onseeked",
      "onseeking",
      "onselect",
      "onstalled",
      "onsubmit",
      "onsuspend",
      "ontimeupdate",
      "ontoggle",
      "onvolumechange",
      "onwaiting",
      "onwheel",
      "onauxclick",
      "ongotpointercapture",
      "onlostpointercapture",
      "onpointerdown",
      "onpointermove",
      "onpointerup",
      "onpointercancel",
      "onpointerover",
      "onpointerout",
      "onpointerenter",
      "onpointerleave",
      "onafterprint",
      "onbeforeprint",
      "onbeforeunload",
      "onhashchange",
      "onlanguagechange",
      "onmessage",
      "onmessageerror",
      "onoffline",
      "ononline",
      "onpagehide",
      "onpageshow",
      "onpopstate",
      "onrejectionhandled",
      "onstorage",
      "onunhandledrejection",
      "onunload",
      "performance",
      "stop",
      "open",
      "print",
      "captureEvents",
      "releaseEvents",
      "getComputedStyle",
      "matchMedia",
      "moveTo",
      "moveBy",
      "resizeTo",
      "resizeBy",
      "getSelection",
      "find",
      "createImageBitmap",
      "scroll",
      "scrollTo",
      "scrollBy",
      "onappinstalled",
      "onbeforeinstallprompt",
      "crypto",
      "ondevicemotion",
      "ondeviceorientation",
      "ondeviceorientationabsolute",
      "indexedDB",
      "webkitStorageInfo",
      "chrome",
      "visualViewport",
      "speechSynthesis",
      "webkitRequestFileSystem",
      "webkitResolveLocalFileSystemURL",
      "openDatabase",
    ],

    // simple import sort
    "simple-import-sort/imports": ["warn"],

    // ts
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/no-use-before-define": [
      "warn",
      { functions: false, typedefs: false, classes: false },
    ],
    "@typescript-eslint/no-inferrable-types": "warn",
    "unicorn/explicit-length-check": "warn",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        varsIgnorePattern: "^_+",
        argsIgnorePattern: "^_+",
        ignoreRestSiblings: true,
      },
    ],
    "@typescript-eslint/no-shadow": "warn",

    // prettier
    "prettier/prettier": [
      "warn",
      {
        trailingComma: "all",
        semi: false,
        arrowParens: "always",
        singleQuote: false,
        printWidth: 80,
        bracketSpacing: true,
      },
    ],

    // async suffix
    "no-restricted-syntax": [
      "warn",
      {
        selector: "FunctionDeclaration[async=false][id.name=/Async$/]",
        message: "Function ending in 'Async' must be declared async",
      },
      {
        selector: "FunctionDeclaration[async=true][id.name!=/Async$/]",
        message: "Async function name must end in 'Async'",
      },
      {
        selector: "MethodDefinition[value.async=false][key.name=/Async$/]",
        message: "Method ending in 'Async' must be declared async",
      },
      {
        selector: "MethodDefinition[value.async=true][key.name!=/Async$/]",
        message: "Async method name must end in 'Async'",
      },
      {
        selector:
          "Property[value.type=/FunctionExpression$/][value.async=false][key.name=/Async$/]",
        message: "Function ending in 'Async' must be declared async",
      },
      {
        selector:
          "Property[value.type=/FunctionExpression$/][value.async=true][key.name!=/Async$/]",
        message: "Async function name must end in 'Async'",
      },
      {
        selector:
          "VariableDeclarator[init.type=/FunctionExpression$/][init.async=false][id.name=/Async$/]",
        message: "Function ending in 'Async' must be declared async",
      },
      {
        selector:
          "VariableDeclarator[init.type=/FunctionExpression$/][init.async=true][id.name!=/Async$/]",
        message: "Async function name must end in 'Async'",
      },
    ],

    // unicorn
    "unicorn/prevent-abbreviations": "off",
    "unicorn/consistent-function-scoping": "off",
    "unicorn/filename-case": ["warn", { cases: { kebabCase: true } }],
    "unicorn/no-abusive-eslint-disable": "warn",
    "unicorn/better-regex": "warn",
    "unicorn/prefer-number-properties": "warn",
    "unicorn/prefer-string-slice": "warn",
    "unicorn/import-index": "warn",
    "unicorn/no-nested-ternary": "warn",
    "unicorn/prefer-set-has": "warn",
    "unicorn/no-zero-fractions": "warn",
    "unicorn/prefer-includes": "warn",
    "unicorn/catch-error-name": "warn",
    "unicorn/prefer-query-selector": "warn",
    "unicorn/throw-new-error": "warn",
    "unicorn/new-for-builtins": "warn",
    "unicorn/no-null": "off",
    "unicorn/no-reduce": "off",
    "unicorn/no-fn-reference-in-iterator": "off",
    "unicorn/consistent-destructuring": "warn",
    "unicorn/no-array-reduce": "off",
    "unicorn/no-array-for-each": "off",
    "unicorn/no-new-array": "off",
    "unicorn/prefer-spread": "off",
    "unicorn/prefer-array-index-of": "warn",
    "unicorn/no-array-push-push": "warn",
    "unicorn/no-array-callback-reference": "off",

    // react
    "react/jsx-filename-extension": ["warn", { extensions: [".js", ".tsx"] }],
    "react/sort-comp": "off",
    "react/jsx-no-literals": "warn",
    "react/prop-types": "off",
    "react/display-name": "off",
    "react/no-deprecated": "warn",
    "react/no-children-prop": "warn",
    "react/jsx-no-target-blank": "warn",
    "react/self-closing-comp": ["warn", { component: true, html: true }],
    "react/jsx-fragments": ["warn", "element"],
    "react/destructuring-assignment": ["warn", "always"],
    "react/function-component-definition": [
      "warn",
      {
        namedComponents: "arrow-function",
        unnamedComponents: "arrow-function",
      },
    ],

    // React Hooks
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",

    // promise
    "promise/always-return": "warn",
    "promise/no-return-wrap": "warn",
    "promise/param-names": "warn",
    "promise/catch-or-return": "warn",
    "promise/no-native": "off",
    "promise/no-nesting": "warn",
    "promise/no-promise-in-callback": "warn",
    "promise/no-callback-in-promise": "warn",
    "promise/avoid-new": "off",
    "promise/no-new-statics": "warn",
    "promise/no-return-in-finally": "warn",
    "promise/valid-params": "warn",

    // format js
    "formatjs/enforce-default-message": ["warn", "literal"],
    "formatjs/no-multiple-whitespaces": "warn",
    "formatjs/no-multiple-plurals": "warn",

    // jsdoc
    "jsdoc/check-alignment": "warn",
    "jsdoc/check-indentation": "warn",
    "jsdoc/check-syntax": "warn",
    "jsdoc/check-tag-names": "warn",
    "jsdoc/check-types": "warn",
    "jsdoc/implements-on-classes": "warn",
    "jsdoc/match-description": "warn",
    "jsdoc/newline-after-description": "warn",
    "jsdoc/no-types": "warn",
    "jsdoc/no-undefined-types": "warn",
    "jsdoc/require-description": "warn",
    "jsdoc/require-description-complete-sentence": "warn",
    "jsdoc/require-jsdoc": "off",
  },
}
